// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/users/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/app/users/usecase.go -destination mocks/users/usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/DoWithLogic/golang-clean-architecture/internal/app/users/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUsecase) Login(ctx context.Context, request dtos.UserLoginRequest) (dtos.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(dtos.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecase)(nil).Login), ctx, request)
}

// SignUp mocks base method.
func (m *MockUsecase) SignUp(ctx context.Context, request dtos.SignUpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsecaseMockRecorder) SignUp(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsecase)(nil).SignUp), ctx, request)
}

// TransitionUserStatus mocks base method.
func (m *MockUsecase) TransitionUserStatus(ctx context.Context, request dtos.TransitionUserStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitionUserStatus", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransitionUserStatus indicates an expected call of TransitionUserStatus.
func (mr *MockUsecaseMockRecorder) TransitionUserStatus(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitionUserStatus", reflect.TypeOf((*MockUsecase)(nil).TransitionUserStatus), ctx, request)
}

// UserDetail mocks base method.
func (m *MockUsecase) UserDetail(ctx context.Context, request dtos.UserDetailRequest) (dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetail", ctx, request)
	ret0, _ := ret[0].(dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetail indicates an expected call of UserDetail.
func (mr *MockUsecaseMockRecorder) UserDetail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetail", reflect.TypeOf((*MockUsecase)(nil).UserDetail), ctx, request)
}

// UserUpdate mocks base method.
func (m *MockUsecase) UserUpdate(ctx context.Context, request dtos.UserUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockUsecaseMockRecorder) UserUpdate(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUsecase)(nil).UserUpdate), ctx, request)
}
